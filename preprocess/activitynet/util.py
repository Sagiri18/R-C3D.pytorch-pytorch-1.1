# --------------------------------------------------------
# R-C3D
# Copyright (c) 2017 Boston University
# Licensed under The MIT License [see LICENSE for details]
# Written by Huijuan Xu
# --------------------------------------------------------

import subprocess
import shutil
import os, errno
import cv2
import json
from collections import defaultdict
import math

def generate_classes(data):
    class_list = []
    for vid, vinfo in data['database'].items():
        for item in vinfo['annotations']:
            class_list.append(item['label'])

    class_list = list(set(class_list))
    class_list = sorted(class_list)
    classes = {'Background': 0}
    for i,cls in enumerate(class_list):
        classes[cls] = i + 1
    return classes

def generate_segment(split, data, classes, frame_dir):
    segment = {}
    VIDEO_PATH = os.path.join(frame_dir, split)
    video_list = set(os.listdir(VIDEO_PATH))
    # get time windows based on video key
    for vid, vinfo in data['database'].items():
        vid_name = [v for v in video_list if vid in v]
        if len(vid_name) == 1:
            if vinfo['subset'] == split:
                # get time windows
                segment[vid] = []
                for anno in vinfo['annotations']:
                    start_time = anno['segment'][0]
                    end_time = anno['segment'][1]
                    label = classes[anno['label']]
                    segment[vid].append([start_time, end_time, label])
    # sort segments by start_time
    for vid in segment:
        segment[vid].sort(key=lambda x: x[0])

    return segment

def mkdir(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

def rm(path):
    try:
        shutil.rmtree(path)
    except OSError as e:
        if e.errno != errno.ENOENT:
            raise

def ffmpeg(filename, outfile, fps):
    command = ["ffmpeg", "-i", filename, "-q:v", "1", "-r", str(fps), outfile]
    pipe = subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
    pipe.communicate()

def resize(filename, size = (171, 128)):
    img = cv2.imread(filename, 100)
    img2 = cv2.resize(img, size, interpolation=cv2.INTER_LINEAR)
    cv2.imwrite(filename, img2, [100])

def duration_analysis(use_per=True):
    '''
    seg_dur_counter: segment duration counter
    seg_num_counter: segment number for each video counter
    use_per: user percent format
    [(0.5, 0.49427679500520294),
    (1.5, 1.734304543877905),
    (2.5, 3.3515435310440513),
    (3.5, 3.889177939646202),
    (4.5, 3.598681928546653),
    (5.5, 3.4599375650364204),
    (6.5, 2.870274020117933),
    (7.5, 2.8312521678806797),
    (8.5, 2.5667707249392993),
    (9.5, 2.4930627818244884),
    (10.5, 2.293617759278529),
    (11.5, 1.9987859868192854),
    (12.5, 1.6822754075615678),
    (13.5, 1.6345820326049254),
    (14.5, 1.5955601803676727),
    (15.5, 1.45681581685744),
    (16.5, 1.5088449531737773),
    (17.5, 1.2443635102323969),
    (18.5, 1.201005896635449),
    (19.5, 1.2530350329517863),
    (20.5, 1.18366285119667),
    (21.5, 1.1056191467221643),
    (22.5, 0.9625390218522373),
    (23.5, 0.9495317377731529),
    (24.5, 0.8888310787374263),
    (25.5, 0.875823794658342),
    (26.5, 0.9148456468955949),
    (27.5, 0.7891085674644468),
    (28.5, 0.8151231356226153),
    (29.5, 0.7717655220256677),
    (30.5, 0.7934443288241415),
    (31.5, 0.802115851543531),
    (32.5, 0.7587582379465834),
    (33.5, 0.7891085674644468),
    (34.5, 0.6590357266736039),
    (35.5, 0.6503642039542143),
    (36.5, 0.7457509538674991),
    (37.5, 0.6113423517169615),
    (38.5, 0.6807145334720777),
    (39.5, 0.6677072493929934),
    (40.5, 0.6156781130766562),
    (41.5, 0.6243496357960457),
    (42.5, 0.47693374956642387),
    (43.5, 0.5246271245230663),
    (44.5, 0.5419701699618453),
    (45.5, 0.5636489767603191),
    (46.5, 0.5332986472424558),
    (47.5, 0.6156781130766562),
    (48.5, 0.4856052722858134),
    (49.5, 0.5636489767603191),
    (50.5, 0.4422476586888658),
    (51.5, 0.47693374956642387),
    (52.5, 0.48126951092611864),
    (53.5, 0.437911897329171),
    (54.5, 0.5029483177245925),
    (55.5, 0.5029483177245925),
    (56.5, 0.36420395421436),
    (57.5, 0.4292403746097815),
    (58.5, 0.45091918140825527),
    (59.5, 0.4162330905306972),
    (60.5, 0.45525494276795003),
    (61.5, 0.3685397155740548),
    (62.5, 0.3945542837322234),
    (63.5, 0.4422476586888658),
    (64.5, 0.4422476586888658),
    (65.5, 0.437911897329171),
    (66.5, 0.35986819285466526),
    (67.5, 0.40756156781130765),
    (68.5, 0.4162330905306972),
    (69.5, 0.3208463406174124),
    (70.5, 0.3815469996531391),
    (71.5, 0.3685397155740548),
    (72.5, 0.4032258064516129),
    (73.5, 0.34252514741588624),
    (74.5, 0.2861602497398543),
    (75.5, 0.40756156781130765),
    (76.5, 0.3338536246964967),
    (77.5, 0.31651057925771764),
    (78.5, 0.25147415886229624),
    (79.5, 0.2991675338189386),
    (80.5, 0.27315296566077),
    (81.5, 0.3555324314949705),
    (82.5, 0.3035032951786334),
    (83.5, 0.3338536246964967),
    (84.5, 0.29483177245924386),
    (85.5, 0.255809920221991),
    (86.5, 0.31651057925771764),
    (87.5, 0.24713839750260147),
    (88.5, 0.24713839750260147),
    (89.5, 0.18643773846687478),
    (90.5, 0.2297953520638224),
    (91.5, 0.27315296566077),
    (92.5, 0.23846687478321194),
    (93.5, 0.2774887270204648),
    (94.5, 0.2297953520638224),
    (95.5, 0.2861602497398543),
    (96.5, 0.2211238293444329),
    (97.5, 0.2081165452653486),
    (98.5, 0.2601456815816857),
    (99.5, 0.2428026361429067),
    (100.5, 0.20378078390565382),
    (101.5, 0.2297953520638224),
    (102.5, 0.2861602497398543),
    (103.5, 0.18643773846687478),
    (104.5, 0.21678806798473813),
    (105.5, 0.2211238293444329),
    (106.5, 0.25147415886229624),
    (107.5, 0.18643773846687478),
    (108.5, 0.2211238293444329),
    (109.5, 0.26881720430107525),
    (110.5, 0.2601456815816857),
    (111.5, 0.25147415886229624),
    (112.5, 0.2297953520638224),
    (113.5, 0.18210197710718),
    (114.5, 0.18643773846687478),
    (115.5, 0.22545959070412763),
    (116.5, 0.2081165452653486),
    (117.5, 0.21245230662504336),
    (118.5, 0.18210197710718),
    (119.5, 0.23846687478321194),
    (120.5, 0.23846687478321194),
    (121.5, 0.19944502254595908),
    (122.5, 0.2211238293444329),
    (123.5, 0.17776621574748525),
    (124.5, 0.22545959070412763),
    (125.5, 0.21678806798473813),
    (126.5, 0.20378078390565382),
    (127.5, 0.1517516475893167),
    (128.5, 0.2211238293444329),
    (129.5, 0.1604231703087062),
    (130.5, 0.19944502254595908),
    (131.5, 0.19944502254595908),
    (132.5, 0.16475893166840097),
    (133.5, 0.18210197710718),
    (134.5, 0.2081165452653486),
    (135.5, 0.15608740894901144),
    (136.5, 0.1387443635102324),
    (137.5, 0.21678806798473813),
    (138.5, 0.1517516475893167),
    (139.5, 0.1387443635102324),
    (140.5, 0.1387443635102324),
    (141.5, 0.1734304543877905),
    (142.5, 0.1517516475893167),
    (143.5, 0.15608740894901144),
    (144.5, 0.1387443635102324),
    (145.5, 0.19510926118626432),
    (146.5, 0.15608740894901144),
    (147.5, 0.1734304543877905),
    (148.5, 0.14308012486992716),
    (149.5, 0.13440860215053763),
    (150.5, 0.13007284079084286),
    (151.5, 0.17776621574748525),
    (152.5, 0.19510926118626432),
    (153.5, 0.12140131807145335),
    (154.5, 0.19944502254595908),
    (155.5, 0.18210197710718),
    (156.5, 0.18643773846687478),
    (157.5, 0.13440860215053763),
    (158.5, 0.16475893166840097),
    (159.5, 0.14308012486992716),
    (160.5, 0.1604231703087062),
    (161.5, 0.15608740894901144),
    (162.5, 0.12140131807145335),
    (163.5, 0.1517516475893167),
    (164.5, 0.1387443635102324),
    (165.5, 0.13440860215053763),
    (166.5, 0.1517516475893167),
    (167.5, 0.12573707943114812),
    (168.5, 0.11272979535206382),
    (169.5, 0.18643773846687478),
    (170.5, 0.10839403399236906),
    (171.5, 0.1040582726326743),
    (172.5, 0.09972251127297954),
    (173.5, 0.12573707943114812),
    (174.5, 0.13440860215053763),
    (175.5, 0.1040582726326743),
    (176.5, 0.11706555671175858),
    (177.5, 0.09538674991328477),
    (178.5, 0.08237946583420049),
    (179.5, 0.10839403399236906),
    (180.5, 0.13007284079084286),
    (181.5, 0.14308012486992716),
    (182.5, 0.11706555671175858),
    (183.5, 0.0693721817551162),
    (184.5, 0.12140131807145335),
    (185.5, 0.09105098855359),
    (186.5, 0.10839403399236906),
    (187.5, 0.14741588622962193),
    (188.5, 0.13440860215053763),
    (189.5, 0.09538674991328477),
    (190.5, 0.08237946583420049),
    (191.5, 0.1040582726326743),
    (192.5, 0.09105098855359),
    (193.5, 0.09105098855359),
    (194.5, 0.05636489767603191),
    (195.5, 0.05636489767603191),
    (196.5, 0.09105098855359),
    (197.5, 0.0693721817551162),
    (198.5, 0.10839403399236906),
    (199.5, 0.08237946583420049),
    (200.5, 0.0693721817551162),
    (201.5, 0.0693721817551162),
    (202.5, 0.07804370447450572),
    (203.5, 0.05202913631633715),
    (204.5, 0.07370794311481096),
    (205.5, 0.0693721817551162),
    (206.5, 0.09105098855359),
    (207.5, 0.06503642039542143),
    (208.5, 0.04769337495664239),
    (209.5, 0.08237946583420049),
    (210.5, 0.06503642039542143),
    (211.5, 0.05636489767603191),
    (212.5, 0.0693721817551162),
    (213.5, 0.07370794311481096),
    (214.5, 0.05202913631633715),
    (215.5, 0.04769337495664239),
    (216.5, 0.01734304543877905),
    (217.5, 0.060700659035726676),
    (218.5, 0.03902185223725286),
    (219.5, 0.021678806798473813),
    (220.5, 0.09105098855359),
    (221.5, 0.026014568158168574),
    (222.5, 0.021678806798473813),
    (223.5, 0.03902185223725286),
    (224.5, 0.0346860908775581),
    (225.5, 0.013007284079084287),
    (226.5, 0.03902185223725286),
    (227.5, 0.021678806798473813),
    (228.5, 0.021678806798473813),
    (229.5, 0.013007284079084287),
    (230.5, 0.026014568158168574),
    (231.5, 0.03902185223725286),
    (232.5, 0.01734304543877905),
    (233.5, 0.013007284079084287),
    (234.5, 0.021678806798473813),
    (235.5, 0.030350329517863338),
    (236.5, 0.004335761359694762),
    (238.5, 0.021678806798473813),
    (239.5, 0.008671522719389525),
    (267.5, 0.004335761359694762),
    (278.5, 0.004335761359694762),
    (292.5, 0.004335761359694762),
    (300.5, 0.004335761359694762),
    (307.5, 0.004335761359694762),
    (378.5, 0.004335761359694762),
    (448.5, 0.004335761359694762)]

    [(0, 25.227568270481143),
    (1, 56.37191157347204),
    (2, 9.777933380014003),
    (3, 3.571071321396419),
    (4, 2.095628688606582),
    (5, 1.100330099029709),
    (6, 0.6752025607682305),
    (7, 0.39011703511053314),
    (8, 0.2850855256576973),
    (9, 0.15504651395418625),
    (10, 0.13003901170351106),
    (11, 0.07502250675202561),
    (12, 0.04001200360108032),
    (13, 0.02000600180054016),
    (15, 0.02000600180054016),
    (16, 0.00500150045013504),
    (17, 0.02000600180054016),
    (18, 0.02000600180054016),
    (19, 0.00500150045013504),
    (20, 0.00500150045013504),
    (23, 0.01000300090027008)]
    '''
    META_FILE = './activity_net.v1-3.min.json'
    data = json.load(open(META_FILE))
    seg_dur_counter = defaultdict(int)
    seg_num_counter = defaultdict(int)
    for vid, vinfo in data['database'].items():
        seg_num = 0
        for anno in vinfo['annotations']:
            start_time = anno['segment'][0]
            end_time = anno['segment'][1]
            dur = round(end_time-start_time)
            seg_dur_counter[dur] += 1
            seg_num += 1
        seg_num_counter[seg_num] += 1  

        if use_per:      
            seg_num = sum(seg_dur_counter.values())
            seg_dur_counter = {k+0.5:100.0*v/seg_num for k,v in seg_dur_counter.items()}
            vid_num = sum(seg_num_counter.values())
            seg_num_counter = {k:100.0*v/vid_num for k,v in seg_num_counter.items()}
    return sorted(seg_dur_counter.items()), sorted(seg_num_counter.items())
